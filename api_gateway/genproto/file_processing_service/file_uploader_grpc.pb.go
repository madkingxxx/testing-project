// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: file_uploader.proto

package file_processing_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileProcessingServiceClient is the client API for FileProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileProcessingServiceClient interface {
	// if you want to use this method, you have to configure the max size that can be sent via grpc connection
	UploadFileWithStreaming(ctx context.Context, opts ...grpc.CallOption) (FileProcessingService_UploadFileWithStreamingClient, error)
	GetFileList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileList, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileProcessingService_DownloadFileClient, error)
}

type fileProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileProcessingServiceClient(cc grpc.ClientConnInterface) FileProcessingServiceClient {
	return &fileProcessingServiceClient{cc}
}

func (c *fileProcessingServiceClient) UploadFileWithStreaming(ctx context.Context, opts ...grpc.CallOption) (FileProcessingService_UploadFileWithStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileProcessingService_ServiceDesc.Streams[0], "/file_processing_service.FileProcessingService/UploadFileWithStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileProcessingServiceUploadFileWithStreamingClient{stream}
	return x, nil
}

type FileProcessingService_UploadFileWithStreamingClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*FileUploadResponse, error)
	grpc.ClientStream
}

type fileProcessingServiceUploadFileWithStreamingClient struct {
	grpc.ClientStream
}

func (x *fileProcessingServiceUploadFileWithStreamingClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileProcessingServiceUploadFileWithStreamingClient) CloseAndRecv() (*FileUploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileProcessingServiceClient) GetFileList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FileList, error) {
	out := new(FileList)
	err := c.cc.Invoke(ctx, "/file_processing_service.FileProcessingService/GetFileList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileProcessingServiceClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (FileProcessingService_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileProcessingService_ServiceDesc.Streams[1], "/file_processing_service.FileProcessingService/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileProcessingServiceDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileProcessingService_DownloadFileClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type fileProcessingServiceDownloadFileClient struct {
	grpc.ClientStream
}

func (x *fileProcessingServiceDownloadFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileProcessingServiceServer is the server API for FileProcessingService service.
// All implementations must embed UnimplementedFileProcessingServiceServer
// for forward compatibility
type FileProcessingServiceServer interface {
	// if you want to use this method, you have to configure the max size that can be sent via grpc connection
	UploadFileWithStreaming(FileProcessingService_UploadFileWithStreamingServer) error
	GetFileList(context.Context, *emptypb.Empty) (*FileList, error)
	DownloadFile(*DownloadFileRequest, FileProcessingService_DownloadFileServer) error
	mustEmbedUnimplementedFileProcessingServiceServer()
}

// UnimplementedFileProcessingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileProcessingServiceServer struct {
}

func (UnimplementedFileProcessingServiceServer) UploadFileWithStreaming(FileProcessingService_UploadFileWithStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFileWithStreaming not implemented")
}
func (UnimplementedFileProcessingServiceServer) GetFileList(context.Context, *emptypb.Empty) (*FileList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileList not implemented")
}
func (UnimplementedFileProcessingServiceServer) DownloadFile(*DownloadFileRequest, FileProcessingService_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileProcessingServiceServer) mustEmbedUnimplementedFileProcessingServiceServer() {}

// UnsafeFileProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileProcessingServiceServer will
// result in compilation errors.
type UnsafeFileProcessingServiceServer interface {
	mustEmbedUnimplementedFileProcessingServiceServer()
}

func RegisterFileProcessingServiceServer(s grpc.ServiceRegistrar, srv FileProcessingServiceServer) {
	s.RegisterService(&FileProcessingService_ServiceDesc, srv)
}

func _FileProcessingService_UploadFileWithStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileProcessingServiceServer).UploadFileWithStreaming(&fileProcessingServiceUploadFileWithStreamingServer{stream})
}

type FileProcessingService_UploadFileWithStreamingServer interface {
	SendAndClose(*FileUploadResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileProcessingServiceUploadFileWithStreamingServer struct {
	grpc.ServerStream
}

func (x *fileProcessingServiceUploadFileWithStreamingServer) SendAndClose(m *FileUploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileProcessingServiceUploadFileWithStreamingServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileProcessingService_GetFileList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileProcessingServiceServer).GetFileList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/file_processing_service.FileProcessingService/GetFileList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileProcessingServiceServer).GetFileList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileProcessingService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileProcessingServiceServer).DownloadFile(m, &fileProcessingServiceDownloadFileServer{stream})
}

type FileProcessingService_DownloadFileServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type fileProcessingServiceDownloadFileServer struct {
	grpc.ServerStream
}

func (x *fileProcessingServiceDownloadFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

// FileProcessingService_ServiceDesc is the grpc.ServiceDesc for FileProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file_processing_service.FileProcessingService",
	HandlerType: (*FileProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileList",
			Handler:    _FileProcessingService_GetFileList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFileWithStreaming",
			Handler:       _FileProcessingService_UploadFileWithStreaming_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FileProcessingService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "file_uploader.proto",
}
